import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart

from google_forms_solver.ai_handler import GeminiHandler
from google_forms_solver.config import (
    BOT_TOKEN,
    GEMINI_API_KEY,
    MODEL_NAME,
    PDF_CONTEXT_PATH,
    SYSTEM_INSTRUCTION,
)
from google_forms_solver.form_parser import FormParser

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

if not BOT_TOKEN:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
ai_handler = GeminiHandler(
    api_key=GEMINI_API_KEY,
    model_name=MODEL_NAME,
    system_instruction=SYSTEM_INSTRUCTION,
    pdf_path=PDF_CONTEXT_PATH,
)
form_parser = FormParser()


@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google –§–æ—Ä–º—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ —Ä–µ—à–∏—Ç—å."
    )


@dp.message()
async def process_link_handler(message: types.Message):
    url = message.text
    if not url or not url.startswith("http"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google –§–æ—Ä–º—É.")
        return

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–æ—Ä–º—ã... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    formatted_questions = form_parser.fetch_and_parse(url)

    if not formatted_questions:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–æ—Ä–º—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞, —Ñ–æ—Ä–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –∏–ª–∏ –µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
        )
        return

    await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö AI –¥–ª—è —Ä–µ—à–µ–Ω–∏—è...")

    try:
        response = await ai_handler.generate_response(formatted_questions)
        await message.answer(f"‚ú® –í–æ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç AI:\n\n{response}")
    except Exception as e:
        logging.error(
            f"Error processing AI response for user {message.from_user.id}: {e}"
        )
        await message.answer(
            "üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def main():
    logging.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
